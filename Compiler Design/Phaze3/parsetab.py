
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN_OP BOOLEAN BREAK CASE CHAR CLASS CLOSE_PAR COMMAS CONTINUE DECREMENT DEFAULT DIVIDE DO DOLLAR_SIGN DOT DOUBLE ELSE ENUM EQUAL_OP FALSE_BOOLEAN FLOAT FOR GREATER_THAN GREATER_THAN_OR_EQUAL_TO ID ID_ERROR IF IMPORT INCREMENT INT LBRACKET LEFT_BRACE LESS_THAN LESS_THAN_OR_EQUAL_TO LOGICAL_AND LOGICAL_NOT LOGICAL_OR MAIN MINUS MODULUS NEW NOT_EQUAL_OP NULL NUMBER NUM_ERROR OPEN_PAR OR PLUS PRINT PRINTLN PRIVATE PROTECTED PUBLIC RBRACKET RETURN RIGHT_BRACE SEMICOLON STATIC STRING SWITCH THEN THIS TIMES TRUE_BOOOLEAN VOID WHILE extendsprogram : class_declarationclass_declaration : CLASS ID LEFT_BRACE list RIGHT_BRACElist : declration_list list \n            | emptydeclration_list : field_declaration \n                       | method_declarationfield_declaration : declarators ID SEMICOLONmethod_declaration : declarators ID OPEN_PAR inside_method_exp CLOSE_PAR LEFT_BRACE inside_method_st RIGHT_BRACEinside_method_exp : parameter_list \n                         | emptyinside_method_st : statment_exist return_existstatment_exist : statment_loop\n                      | empty return_exist : RETURN expresstion SEMICOLON \n                    | empty declarators : declare_type_exist static_exist typedeclare_type_exist : declare_type \n                          | empty declare_type : PUBLIC \n                    | PRIVATE static_exist : STATIC \n                    | empty type : prim_type \n            | class_type \n            | arr_typeprim_type : INT \n                 | BOOLEAN \n                 | DOUBLE \n                 | FLOAT \n                 | STRING \n                 | CHAR \n                 | VOIDclass_type : IDarr_type : arr_typed LBRACKET RBRACKET \n                | arr_typed LBRACKET NUMBER RBRACKETarr_typed : INT \n                 | class_typeparameter_list : type ID inputtinputt : input inputt \n              | emptyinput : COMMAS type IDstatment_loop : statment statment_loop \n                     | statmentstatment : if_statment \n                | while_statment \n                | declare_var\n                | call_function\n                | define_arr\n                | assignassign : ID EQUAL_OP expresstion SEMICOLONif_statment : IF OPEN_PAR expresstion CLOSE_PAR LEFT_BRACE statment_loop RIGHT_BRACE \n                   | IF OPEN_PAR expresstion CLOSE_PAR LEFT_BRACE statment_loop RIGHT_BRACE ELSE LEFT_BRACE statment_loop RIGHT_BRACE\n                   | IF OPEN_PAR expresstion CLOSE_PAR statment_loop  \n                   | IF OPEN_PAR expresstion CLOSE_PAR statment_loop ELSE statment_loopwhile_statment : WHILE OPEN_PAR expresstion CLOSE_PAR statment_loop\n                      | WHILE OPEN_PAR expresstion CLOSE_PAR LEFT_BRACE statment_loop RIGHT_BRACEdeclare_var : type ID EQUAL_OP expresstion SEMICOLONreference : half_reference exist_id half_reference : THIS \n                      | ID exist_id : id_loop \n                | emptyid_loop : DOT ID reference \n               | empty argument_exist : argument_list \n                      | emptyargument_list : expresstion argument_list_exist argument_list_exist : argument_list_loop \n                           | emptyargument_list_loop : COMMAS expresstion argument_list_loop \n                          | emptycall_function : reference OPEN_PAR argument_exist CLOSE_PAR SEMICOLONexist_expresstion : define_arr : reference exist_exp_arr expresstion SEMICOLONexist_exp_arr : exp_arr \n                     | emptyexp_arr : LBRACKET expresstion RBRACKETbinop : PLUS \n             | MINUS\n             | TIMES\n             | DIVIDE\n             | MODULUS\n             | ASSIGN_OP\n             | LOGICAL_AND\n             | LOGICAL_OR\n             | GREATER_THAN\n             | LESS_THAN\n             | GREATER_THAN_OR_EQUAL_TO\n             | LESS_THAN_OR_EQUAL_TOunop : MINUSanop : DECREMENT \n            | INCREMENTexpresstion : reference exist_exp_arr expresstion \n                   | reference OPEN_PAR argument_exist CLOSE_PAR\n                   | OPEN_PAR expresstion CLOSE_PAR\n                   | NUMBER\n                   | ID\n                   | TRUE_BOOOLEAN\n                   | FALSE_BOOLEAN\n                   | INT LBRACKET expresstion RBRACKET\n                   | ID LBRACKET expresstion RBRACKET\n                   | expresstion binop expresstion\n                   | unop expresstion\n                   | expresstion anop\n                   | NEW ID OPEN_PAR CLOSE_PAR empty :'
    
_lr_action_items = {'CLASS':([0,],[3,]),'$end':([1,2,16,],[0,-1,-2,]),'ID':([3,5,7,8,9,10,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,44,46,50,51,52,57,58,59,60,61,62,63,66,67,68,69,71,72,73,75,77,78,79,81,82,83,84,85,86,87,88,89,91,93,94,99,100,101,105,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,138,139,145,146,147,148,149,157,158,159,160,161,162,169,173,174,175,177,179,],[4,-106,-106,-18,-5,-6,18,-106,-17,-19,-20,35,-21,-22,-7,35,-16,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,43,-34,52,35,-35,-33,52,-44,-45,-46,-47,-48,-49,80,-106,-106,-59,90,91,-8,91,-42,91,91,91,91,-75,-76,91,-58,-61,-62,112,-60,-106,91,91,136,-90,91,148,91,-50,91,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,91,91,91,52,52,91,-74,-77,-60,-63,52,-53,-55,52,-57,-72,52,-51,-54,-56,52,-52,]),'LEFT_BRACE':([4,42,138,139,176,],[5,46,157,160,177,]),'RIGHT_BRACE':([5,6,7,8,9,10,17,22,46,53,54,55,56,57,58,59,60,61,62,63,73,74,76,77,114,137,146,158,159,161,162,168,170,173,174,175,178,179,],[-106,16,-106,-4,-5,-6,-3,-7,-106,73,-106,-12,-13,-43,-44,-45,-46,-47,-48,-49,-8,-11,-15,-42,-50,-14,-74,-53,-55,-57,-72,173,175,-51,-54,-56,179,-52,]),'STATIC':([5,7,8,9,10,12,13,14,15,22,73,],[-106,-106,-18,-5,-6,20,-17,-19,-20,-7,-8,]),'INT':([5,7,8,9,10,12,13,14,15,19,20,21,22,23,46,50,52,57,58,59,60,61,62,63,67,68,69,72,73,75,77,78,79,81,82,83,84,85,86,87,88,91,93,94,99,101,105,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,138,139,145,146,147,148,149,157,158,159,160,161,162,169,173,174,175,177,179,],[-106,-106,-18,-5,-6,-106,-17,-19,-20,28,-21,-22,-7,28,28,28,-60,28,-44,-45,-46,-47,-48,-49,-106,-106,-59,98,-8,98,-42,98,98,98,98,-75,-76,98,-58,-61,-62,-60,-106,98,98,-90,98,98,-50,98,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,98,98,98,28,28,98,-74,-77,-60,-63,28,-53,-55,28,-57,-72,28,-51,-54,-56,28,-52,]),'BOOLEAN':([5,7,8,9,10,12,13,14,15,19,20,21,22,23,46,50,57,58,59,60,61,62,63,73,77,114,138,139,146,157,158,159,160,161,162,169,173,174,175,177,179,],[-106,-106,-18,-5,-6,-106,-17,-19,-20,29,-21,-22,-7,29,29,29,29,-44,-45,-46,-47,-48,-49,-8,-42,-50,29,29,-74,29,-53,-55,29,-57,-72,29,-51,-54,-56,29,-52,]),'DOUBLE':([5,7,8,9,10,12,13,14,15,19,20,21,22,23,46,50,57,58,59,60,61,62,63,73,77,114,138,139,146,157,158,159,160,161,162,169,173,174,175,177,179,],[-106,-106,-18,-5,-6,-106,-17,-19,-20,30,-21,-22,-7,30,30,30,30,-44,-45,-46,-47,-48,-49,-8,-42,-50,30,30,-74,30,-53,-55,30,-57,-72,30,-51,-54,-56,30,-52,]),'FLOAT':([5,7,8,9,10,12,13,14,15,19,20,21,22,23,46,50,57,58,59,60,61,62,63,73,77,114,138,139,146,157,158,159,160,161,162,169,173,174,175,177,179,],[-106,-106,-18,-5,-6,-106,-17,-19,-20,31,-21,-22,-7,31,31,31,31,-44,-45,-46,-47,-48,-49,-8,-42,-50,31,31,-74,31,-53,-55,31,-57,-72,31,-51,-54,-56,31,-52,]),'STRING':([5,7,8,9,10,12,13,14,15,19,20,21,22,23,46,50,57,58,59,60,61,62,63,73,77,114,138,139,146,157,158,159,160,161,162,169,173,174,175,177,179,],[-106,-106,-18,-5,-6,-106,-17,-19,-20,32,-21,-22,-7,32,32,32,32,-44,-45,-46,-47,-48,-49,-8,-42,-50,32,32,-74,32,-53,-55,32,-57,-72,32,-51,-54,-56,32,-52,]),'CHAR':([5,7,8,9,10,12,13,14,15,19,20,21,22,23,46,50,57,58,59,60,61,62,63,73,77,114,138,139,146,157,158,159,160,161,162,169,173,174,175,177,179,],[-106,-106,-18,-5,-6,-106,-17,-19,-20,33,-21,-22,-7,33,33,33,33,-44,-45,-46,-47,-48,-49,-8,-42,-50,33,33,-74,33,-53,-55,33,-57,-72,33,-51,-54,-56,33,-52,]),'VOID':([5,7,8,9,10,12,13,14,15,19,20,21,22,23,46,50,57,58,59,60,61,62,63,73,77,114,138,139,146,157,158,159,160,161,162,169,173,174,175,177,179,],[-106,-106,-18,-5,-6,-106,-17,-19,-20,34,-21,-22,-7,34,34,34,34,-44,-45,-46,-47,-48,-49,-8,-42,-50,34,34,-74,34,-53,-55,34,-57,-72,34,-51,-54,-56,34,-52,]),'PUBLIC':([5,7,9,10,22,73,],[14,14,-5,-6,-7,-8,]),'PRIVATE':([5,7,9,10,22,73,],[15,15,-5,-6,-7,-8,]),'SEMICOLON':([18,91,92,95,96,97,102,110,116,129,130,135,140,141,151,152,154,164,165,166,167,],[22,-97,114,-96,-98,-99,137,146,-104,-91,-92,-103,161,162,-102,-93,-95,-101,-94,-100,-105,]),'OPEN_PAR':([18,52,64,65,67,68,69,72,75,78,79,81,82,83,84,85,86,87,88,91,93,94,99,101,105,113,115,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,136,145,147,148,149,],[23,-60,78,79,81,-106,-59,94,94,94,94,94,94,-75,-76,94,-58,-61,-62,-60,132,94,94,-90,94,94,94,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,94,94,94,156,94,-77,-60,-63,]),'CLOSE_PAR':([23,37,38,39,43,47,48,49,70,81,90,91,95,96,97,103,104,106,107,108,109,116,129,130,132,133,135,142,143,144,151,152,153,154,156,163,164,165,166,167,171,172,],[-106,42,-9,-10,-106,-38,-106,-40,-39,-106,-41,-97,-96,-98,-99,138,139,141,-65,-66,-106,-104,-91,-92,-106,154,-103,-67,-68,-69,-102,-93,165,-95,167,-106,-101,-94,-100,-105,-70,-71,]),'LBRACKET':([26,28,35,36,52,67,68,69,86,87,88,91,93,98,148,149,],[-37,-36,-33,41,-33,85,-106,-59,-58,-61,-62,113,85,134,-60,-63,]),'RBRACKET':([41,45,91,95,96,97,111,116,129,130,135,150,151,152,154,155,164,165,166,167,],[44,51,-97,-96,-98,-99,147,-104,-91,-92,-103,164,-102,-93,-95,166,-101,-94,-100,-105,]),'NUMBER':([41,52,67,68,69,72,75,78,79,81,82,83,84,85,86,87,88,91,93,94,99,101,105,113,115,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,145,147,148,149,],[45,-60,-106,-106,-59,95,95,95,95,95,95,-75,-76,95,-58,-61,-62,-60,-106,95,95,-90,95,95,95,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,95,95,95,95,-77,-60,-63,]),'COMMAS':([43,48,90,91,95,96,97,109,116,129,130,135,151,152,154,163,164,165,166,167,],[50,50,-41,-97,-96,-98,-99,145,-104,-91,-92,-103,-102,-93,-95,145,-101,-94,-100,-105,]),'RETURN':([46,54,55,56,57,58,59,60,61,62,63,77,114,146,158,159,161,162,173,174,175,179,],[-106,75,-12,-13,-43,-44,-45,-46,-47,-48,-49,-42,-50,-74,-53,-55,-57,-72,-51,-54,-56,-52,]),'IF':([46,57,58,59,60,61,62,63,77,114,138,139,146,157,158,159,160,161,162,169,173,174,175,177,179,],[64,64,-44,-45,-46,-47,-48,-49,-42,-50,64,64,-74,64,-53,-55,64,-57,-72,64,-51,-54,-56,64,-52,]),'WHILE':([46,57,58,59,60,61,62,63,77,114,138,139,146,157,158,159,160,161,162,169,173,174,175,177,179,],[65,65,-44,-45,-46,-47,-48,-49,-42,-50,65,65,-74,65,-53,-55,65,-57,-72,65,-51,-54,-56,65,-52,]),'THIS':([46,52,57,58,59,60,61,62,63,67,68,69,72,75,77,78,79,81,82,83,84,85,86,87,88,91,93,94,99,101,105,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,138,139,145,146,147,148,149,157,158,159,160,161,162,169,173,174,175,177,179,],[69,-60,69,-44,-45,-46,-47,-48,-49,-106,-106,-59,69,69,-42,69,69,69,69,-75,-76,69,-58,-61,-62,-60,-106,69,69,-90,69,69,69,-50,69,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,69,69,69,69,69,69,-74,-77,-60,-63,69,-53,-55,69,-57,-72,69,-51,-54,-56,69,-52,]),'EQUAL_OP':([52,80,],[72,105,]),'DOT':([52,68,69,91,148,],[-60,89,-59,-60,-60,]),'TRUE_BOOOLEAN':([52,67,68,69,72,75,78,79,81,82,83,84,85,86,87,88,91,93,94,99,101,105,113,115,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,145,147,148,149,],[-60,-106,-106,-59,96,96,96,96,96,96,-75,-76,96,-58,-61,-62,-60,-106,96,96,-90,96,96,96,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,96,96,96,96,-77,-60,-63,]),'FALSE_BOOLEAN':([52,67,68,69,72,75,78,79,81,82,83,84,85,86,87,88,91,93,94,99,101,105,113,115,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,145,147,148,149,],[-60,-106,-106,-59,97,97,97,97,97,97,-75,-76,97,-58,-61,-62,-60,-106,97,97,-90,97,97,97,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,97,97,97,97,-77,-60,-63,]),'NEW':([52,67,68,69,72,75,78,79,81,82,83,84,85,86,87,88,91,93,94,99,101,105,113,115,117,118,119,120,121,122,123,124,125,126,127,128,131,132,134,145,147,148,149,],[-60,-106,-106,-59,100,100,100,100,100,100,-75,-76,100,-58,-61,-62,-60,-106,100,100,-90,100,100,100,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,100,100,100,100,-77,-60,-63,]),'MINUS':([52,67,68,69,72,75,78,79,81,82,83,84,85,86,87,88,91,92,93,94,95,96,97,99,101,102,103,104,105,109,110,111,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,140,145,147,148,149,150,151,152,154,155,163,164,165,166,167,],[-60,-106,-106,-59,101,101,101,101,101,101,-75,-76,101,-58,-61,-62,-60,118,-106,101,-96,-98,-99,101,-90,118,118,118,101,118,118,118,101,101,-104,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,101,101,118,101,118,118,101,-77,-60,-63,118,118,118,-95,118,118,-101,-94,-100,-105,]),'ELSE':([57,58,59,60,61,62,63,77,114,146,158,159,161,162,173,174,175,179,],[-43,-44,-45,-46,-47,-48,-49,-42,-50,-74,169,-55,-57,-72,176,-54,-56,-52,]),'PLUS':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,117,-96,-98,-99,117,117,117,117,117,117,-104,-91,-92,117,117,117,117,117,117,-95,117,117,-101,-94,-100,-105,]),'TIMES':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,119,-96,-98,-99,119,119,119,119,119,119,-104,-91,-92,119,119,119,119,119,119,-95,119,119,-101,-94,-100,-105,]),'DIVIDE':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,120,-96,-98,-99,120,120,120,120,120,120,-104,-91,-92,120,120,120,120,120,120,-95,120,120,-101,-94,-100,-105,]),'MODULUS':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,121,-96,-98,-99,121,121,121,121,121,121,-104,-91,-92,121,121,121,121,121,121,-95,121,121,-101,-94,-100,-105,]),'ASSIGN_OP':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,122,-96,-98,-99,122,122,122,122,122,122,-104,-91,-92,122,122,122,122,122,122,-95,122,122,-101,-94,-100,-105,]),'LOGICAL_AND':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,123,-96,-98,-99,123,123,123,123,123,123,-104,-91,-92,123,123,123,123,123,123,-95,123,123,-101,-94,-100,-105,]),'LOGICAL_OR':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,124,-96,-98,-99,124,124,124,124,124,124,-104,-91,-92,124,124,124,124,124,124,-95,124,124,-101,-94,-100,-105,]),'GREATER_THAN':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,125,-96,-98,-99,125,125,125,125,125,125,-104,-91,-92,125,125,125,125,125,125,-95,125,125,-101,-94,-100,-105,]),'LESS_THAN':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,126,-96,-98,-99,126,126,126,126,126,126,-104,-91,-92,126,126,126,126,126,126,-95,126,126,-101,-94,-100,-105,]),'GREATER_THAN_OR_EQUAL_TO':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,127,-96,-98,-99,127,127,127,127,127,127,-104,-91,-92,127,127,127,127,127,127,-95,127,127,-101,-94,-100,-105,]),'LESS_THAN_OR_EQUAL_TO':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,128,-96,-98,-99,128,128,128,128,128,128,-104,-91,-92,128,128,128,128,128,128,-95,128,128,-101,-94,-100,-105,]),'DECREMENT':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,129,-96,-98,-99,129,129,129,129,129,129,-104,-91,-92,129,129,129,129,129,129,-95,129,129,-101,-94,-100,-105,]),'INCREMENT':([91,92,95,96,97,102,103,104,109,110,111,116,129,130,133,135,140,150,151,152,154,155,163,164,165,166,167,],[-97,130,-96,-98,-99,130,130,130,130,130,130,-104,-91,-92,130,130,130,130,130,130,-95,130,130,-101,-94,-100,-105,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_declaration':([0,],[2,]),'list':([5,7,],[6,17,]),'declration_list':([5,7,],[7,7,]),'empty':([5,7,12,23,43,46,48,54,67,68,81,93,109,132,163,],[8,8,21,39,49,56,49,76,84,88,108,84,144,108,172,]),'field_declaration':([5,7,],[9,9,]),'method_declaration':([5,7,],[10,10,]),'declarators':([5,7,],[11,11,]),'declare_type_exist':([5,7,],[12,12,]),'declare_type':([5,7,],[13,13,]),'static_exist':([12,],[19,]),'type':([19,23,46,50,57,138,139,157,160,169,177,],[24,40,66,71,66,66,66,66,66,66,66,]),'prim_type':([19,23,46,50,57,138,139,157,160,169,177,],[25,25,25,25,25,25,25,25,25,25,25,]),'class_type':([19,23,46,50,57,138,139,157,160,169,177,],[26,26,26,26,26,26,26,26,26,26,26,]),'arr_type':([19,23,46,50,57,138,139,157,160,169,177,],[27,27,27,27,27,27,27,27,27,27,27,]),'arr_typed':([19,23,46,50,57,138,139,157,160,169,177,],[36,36,36,36,36,36,36,36,36,36,36,]),'inside_method_exp':([23,],[37,]),'parameter_list':([23,],[38,]),'inputt':([43,48,],[47,70,]),'input':([43,48,],[48,48,]),'inside_method_st':([46,],[53,]),'statment_exist':([46,],[54,]),'statment_loop':([46,57,138,139,157,160,169,177,],[55,77,158,159,168,170,174,178,]),'statment':([46,57,138,139,157,160,169,177,],[57,57,57,57,57,57,57,57,]),'if_statment':([46,57,138,139,157,160,169,177,],[58,58,58,58,58,58,58,58,]),'while_statment':([46,57,138,139,157,160,169,177,],[59,59,59,59,59,59,59,59,]),'declare_var':([46,57,138,139,157,160,169,177,],[60,60,60,60,60,60,60,60,]),'call_function':([46,57,138,139,157,160,169,177,],[61,61,61,61,61,61,61,61,]),'define_arr':([46,57,138,139,157,160,169,177,],[62,62,62,62,62,62,62,62,]),'assign':([46,57,138,139,157,160,169,177,],[63,63,63,63,63,63,63,63,]),'reference':([46,57,72,75,78,79,81,82,85,94,99,105,112,113,115,131,132,134,138,139,145,157,160,169,177,],[67,67,93,93,93,93,93,93,93,93,93,93,149,93,93,93,93,93,67,67,93,67,67,67,67,]),'half_reference':([46,57,72,75,78,79,81,82,85,94,99,105,112,113,115,131,132,134,138,139,145,157,160,169,177,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'return_exist':([54,],[74,]),'exist_exp_arr':([67,93,],[82,131,]),'exp_arr':([67,93,],[83,83,]),'exist_id':([68,],[86,]),'id_loop':([68,],[87,]),'expresstion':([72,75,78,79,81,82,85,94,99,105,113,115,131,132,134,145,],[92,102,103,104,109,110,111,133,135,140,150,151,152,109,155,163,]),'unop':([72,75,78,79,81,82,85,94,99,105,113,115,131,132,134,145,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'argument_exist':([81,132,],[106,153,]),'argument_list':([81,132,],[107,107,]),'binop':([92,102,103,104,109,110,111,133,135,140,150,151,152,155,163,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'anop':([92,102,103,104,109,110,111,133,135,140,150,151,152,155,163,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'argument_list_exist':([109,],[142,]),'argument_list_loop':([109,163,],[143,171,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_declaration','program',1,'p_program','myParser.py',5),
  ('class_declaration -> CLASS ID LEFT_BRACE list RIGHT_BRACE','class_declaration',5,'p_class_decleration','myParser.py',9),
  ('list -> declration_list list','list',2,'p_list','myParser.py',13),
  ('list -> empty','list',1,'p_list','myParser.py',14),
  ('declration_list -> field_declaration','declration_list',1,'p_declration_list','myParser.py',18),
  ('declration_list -> method_declaration','declration_list',1,'p_declration_list','myParser.py',19),
  ('field_declaration -> declarators ID SEMICOLON','field_declaration',3,'p_field_declaration','myParser.py',23),
  ('method_declaration -> declarators ID OPEN_PAR inside_method_exp CLOSE_PAR LEFT_BRACE inside_method_st RIGHT_BRACE','method_declaration',8,'p_method_declaration','myParser.py',27),
  ('inside_method_exp -> parameter_list','inside_method_exp',1,'p_inside_method_exp','myParser.py',31),
  ('inside_method_exp -> empty','inside_method_exp',1,'p_inside_method_exp','myParser.py',32),
  ('inside_method_st -> statment_exist return_exist','inside_method_st',2,'p_inside_method_st','myParser.py',36),
  ('statment_exist -> statment_loop','statment_exist',1,'p_statment_exist','myParser.py',40),
  ('statment_exist -> empty','statment_exist',1,'p_statment_exist','myParser.py',41),
  ('return_exist -> RETURN expresstion SEMICOLON','return_exist',3,'p_return_exist','myParser.py',45),
  ('return_exist -> empty','return_exist',1,'p_return_exist','myParser.py',46),
  ('declarators -> declare_type_exist static_exist type','declarators',3,'p_declarators','myParser.py',50),
  ('declare_type_exist -> declare_type','declare_type_exist',1,'p_declare_type_exist','myParser.py',54),
  ('declare_type_exist -> empty','declare_type_exist',1,'p_declare_type_exist','myParser.py',55),
  ('declare_type -> PUBLIC','declare_type',1,'p_declare_type','myParser.py',59),
  ('declare_type -> PRIVATE','declare_type',1,'p_declare_type','myParser.py',60),
  ('static_exist -> STATIC','static_exist',1,'p_static_exist','myParser.py',64),
  ('static_exist -> empty','static_exist',1,'p_static_exist','myParser.py',65),
  ('type -> prim_type','type',1,'p_type','myParser.py',69),
  ('type -> class_type','type',1,'p_type','myParser.py',70),
  ('type -> arr_type','type',1,'p_type','myParser.py',71),
  ('prim_type -> INT','prim_type',1,'p_prim_type','myParser.py',75),
  ('prim_type -> BOOLEAN','prim_type',1,'p_prim_type','myParser.py',76),
  ('prim_type -> DOUBLE','prim_type',1,'p_prim_type','myParser.py',77),
  ('prim_type -> FLOAT','prim_type',1,'p_prim_type','myParser.py',78),
  ('prim_type -> STRING','prim_type',1,'p_prim_type','myParser.py',79),
  ('prim_type -> CHAR','prim_type',1,'p_prim_type','myParser.py',80),
  ('prim_type -> VOID','prim_type',1,'p_prim_type','myParser.py',81),
  ('class_type -> ID','class_type',1,'p_class_type','myParser.py',85),
  ('arr_type -> arr_typed LBRACKET RBRACKET','arr_type',3,'p_arr_type','myParser.py',89),
  ('arr_type -> arr_typed LBRACKET NUMBER RBRACKET','arr_type',4,'p_arr_type','myParser.py',90),
  ('arr_typed -> INT','arr_typed',1,'p_arr_typed','myParser.py',94),
  ('arr_typed -> class_type','arr_typed',1,'p_arr_typed','myParser.py',95),
  ('parameter_list -> type ID inputt','parameter_list',3,'p_parameter_list','myParser.py',99),
  ('inputt -> input inputt','inputt',2,'p_inputt','myParser.py',103),
  ('inputt -> empty','inputt',1,'p_inputt','myParser.py',104),
  ('input -> COMMAS type ID','input',3,'p_input','myParser.py',108),
  ('statment_loop -> statment statment_loop','statment_loop',2,'p_statment_loop','myParser.py',112),
  ('statment_loop -> statment','statment_loop',1,'p_statment_loop','myParser.py',113),
  ('statment -> if_statment','statment',1,'p_statment','myParser.py',119),
  ('statment -> while_statment','statment',1,'p_statment','myParser.py',120),
  ('statment -> declare_var','statment',1,'p_statment','myParser.py',121),
  ('statment -> call_function','statment',1,'p_statment','myParser.py',122),
  ('statment -> define_arr','statment',1,'p_statment','myParser.py',123),
  ('statment -> assign','statment',1,'p_statment','myParser.py',124),
  ('assign -> ID EQUAL_OP expresstion SEMICOLON','assign',4,'p_assign','myParser.py',128),
  ('if_statment -> IF OPEN_PAR expresstion CLOSE_PAR LEFT_BRACE statment_loop RIGHT_BRACE','if_statment',7,'p_if_statment','myParser.py',132),
  ('if_statment -> IF OPEN_PAR expresstion CLOSE_PAR LEFT_BRACE statment_loop RIGHT_BRACE ELSE LEFT_BRACE statment_loop RIGHT_BRACE','if_statment',11,'p_if_statment','myParser.py',133),
  ('if_statment -> IF OPEN_PAR expresstion CLOSE_PAR statment_loop','if_statment',5,'p_if_statment','myParser.py',134),
  ('if_statment -> IF OPEN_PAR expresstion CLOSE_PAR statment_loop ELSE statment_loop','if_statment',7,'p_if_statment','myParser.py',135),
  ('while_statment -> WHILE OPEN_PAR expresstion CLOSE_PAR statment_loop','while_statment',5,'p_while_statment','myParser.py',139),
  ('while_statment -> WHILE OPEN_PAR expresstion CLOSE_PAR LEFT_BRACE statment_loop RIGHT_BRACE','while_statment',7,'p_while_statment','myParser.py',140),
  ('declare_var -> type ID EQUAL_OP expresstion SEMICOLON','declare_var',5,'p_declare_var','myParser.py',144),
  ('reference -> half_reference exist_id','reference',2,'p_reference','myParser.py',148),
  ('half_reference -> THIS','half_reference',1,'p_half_reference','myParser.py',152),
  ('half_reference -> ID','half_reference',1,'p_half_reference','myParser.py',153),
  ('exist_id -> id_loop','exist_id',1,'p_exist_id','myParser.py',157),
  ('exist_id -> empty','exist_id',1,'p_exist_id','myParser.py',158),
  ('id_loop -> DOT ID reference','id_loop',3,'p_id_loop','myParser.py',162),
  ('id_loop -> empty','id_loop',1,'p_id_loop','myParser.py',163),
  ('argument_exist -> argument_list','argument_exist',1,'p_argument_exist','myParser.py',167),
  ('argument_exist -> empty','argument_exist',1,'p_argument_exist','myParser.py',168),
  ('argument_list -> expresstion argument_list_exist','argument_list',2,'p_argument_list','myParser.py',172),
  ('argument_list_exist -> argument_list_loop','argument_list_exist',1,'p_argument_list_exist','myParser.py',176),
  ('argument_list_exist -> empty','argument_list_exist',1,'p_argument_list_exist','myParser.py',177),
  ('argument_list_loop -> COMMAS expresstion argument_list_loop','argument_list_loop',3,'p_argument_list_loop','myParser.py',181),
  ('argument_list_loop -> empty','argument_list_loop',1,'p_argument_list_loop','myParser.py',182),
  ('call_function -> reference OPEN_PAR argument_exist CLOSE_PAR SEMICOLON','call_function',5,'p_call_function','myParser.py',186),
  ('exist_expresstion -> <empty>','exist_expresstion',0,'p_exist_expresstion','myParser.py',190),
  ('define_arr -> reference exist_exp_arr expresstion SEMICOLON','define_arr',4,'p_define_arr','myParser.py',194),
  ('exist_exp_arr -> exp_arr','exist_exp_arr',1,'p_exist_exp_arr','myParser.py',198),
  ('exist_exp_arr -> empty','exist_exp_arr',1,'p_exist_exp_arr','myParser.py',199),
  ('exp_arr -> LBRACKET expresstion RBRACKET','exp_arr',3,'p_exp_arr','myParser.py',203),
  ('binop -> PLUS','binop',1,'p_binop','myParser.py',207),
  ('binop -> MINUS','binop',1,'p_binop','myParser.py',208),
  ('binop -> TIMES','binop',1,'p_binop','myParser.py',209),
  ('binop -> DIVIDE','binop',1,'p_binop','myParser.py',210),
  ('binop -> MODULUS','binop',1,'p_binop','myParser.py',211),
  ('binop -> ASSIGN_OP','binop',1,'p_binop','myParser.py',212),
  ('binop -> LOGICAL_AND','binop',1,'p_binop','myParser.py',213),
  ('binop -> LOGICAL_OR','binop',1,'p_binop','myParser.py',214),
  ('binop -> GREATER_THAN','binop',1,'p_binop','myParser.py',215),
  ('binop -> LESS_THAN','binop',1,'p_binop','myParser.py',216),
  ('binop -> GREATER_THAN_OR_EQUAL_TO','binop',1,'p_binop','myParser.py',217),
  ('binop -> LESS_THAN_OR_EQUAL_TO','binop',1,'p_binop','myParser.py',218),
  ('unop -> MINUS','unop',1,'p_unop','myParser.py',222),
  ('anop -> DECREMENT','anop',1,'p_anop','myParser.py',226),
  ('anop -> INCREMENT','anop',1,'p_anop','myParser.py',227),
  ('expresstion -> reference exist_exp_arr expresstion','expresstion',3,'p_expresstion','myParser.py',231),
  ('expresstion -> reference OPEN_PAR argument_exist CLOSE_PAR','expresstion',4,'p_expresstion','myParser.py',232),
  ('expresstion -> OPEN_PAR expresstion CLOSE_PAR','expresstion',3,'p_expresstion','myParser.py',233),
  ('expresstion -> NUMBER','expresstion',1,'p_expresstion','myParser.py',234),
  ('expresstion -> ID','expresstion',1,'p_expresstion','myParser.py',235),
  ('expresstion -> TRUE_BOOOLEAN','expresstion',1,'p_expresstion','myParser.py',236),
  ('expresstion -> FALSE_BOOLEAN','expresstion',1,'p_expresstion','myParser.py',237),
  ('expresstion -> INT LBRACKET expresstion RBRACKET','expresstion',4,'p_expresstion','myParser.py',238),
  ('expresstion -> ID LBRACKET expresstion RBRACKET','expresstion',4,'p_expresstion','myParser.py',239),
  ('expresstion -> expresstion binop expresstion','expresstion',3,'p_expresstion','myParser.py',240),
  ('expresstion -> unop expresstion','expresstion',2,'p_expresstion','myParser.py',241),
  ('expresstion -> expresstion anop','expresstion',2,'p_expresstion','myParser.py',242),
  ('expresstion -> NEW ID OPEN_PAR CLOSE_PAR','expresstion',4,'p_expresstion','myParser.py',243),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',247),
]
